#string priklad "(1+455)*3-1"

mov bl, 0
; bl = typ tokenu
; 0 - nic
; 1 - èíslo
; 2 - operátor

mov adr, priklad
loop:               ;zaèátek ètení inputu
mov al, [adr]       ;první znak vložen do al registeru
iadd adr, 1         ;posunutí na další znak

mov ah, 48          ; Pokud je znak <48 nebo >57, není èíslo
cmp al, ah          ;
jl not_digit        ;
                    ;
mov ah, 57          ;
cmp al, ah          ;
jg not_digit        ;

; digit definitely
isub al, 48
mov dx, al
mov bl, 1

loop_digit:
mov al, [adr]

mov ah, 48          
cmp al, ah          ; pokud je znak menší než 48, konèí èíslo
jl end_token        ; ergo konec tokenu

mov ah, 57          
cmp al, ah          ; pokud je znak vìtší než 57, konèí èíslo
jg end_token        ; ergo konec tokenu

isub al, 48         ; subtract ASCII bias
iadd adr, 1         ; posunutí o znak dále

mul dx, 10          ; vynásobení pøedchozího èísla desíti
add dx, al          ; pøiètení nové cifry k pøedchozímu èíslu
jmp loop_digit


not_digit:

mov ah, '*'        ;  Hvìzdièka do ah registru
cmp al, ah         ;  Kontrola, jestli je znak hvìzdièka
je operator_mul    ;  Pokud ano, skok na operator_mul

mov ah, '+'        ;  Plus do ah registru
cmp al, ah         ;  Kontrola, jestli je znak
je operator_add    ;  Pokud ano, skok na operator_add

mov ah, '-'        ;  Minus do ah registru
cmp al, ah         ;  Kontrola, jestli je znak
je operator_sub    ;  Pokud ano, skok na operator_sub

mov ah, '/'        ;  Lomítko do ah registru
cmp al, ah         ;  Kontrola, jestli je znak
je operator_div    ;  Pokud ano, skok na operator_div

jmp not_operator   ; Pokud není základní operátor, skoèí na not_operator

operator_mul:
operator_add:
operator_sub:
operator_div:


not_operator:

mov ah, 40
cmp al, ah
je parenthesis_left

mov ah, 41
cmp al, ah
je parenthesis_right

parenthesis_left:
parenthesis_right:

end_token: